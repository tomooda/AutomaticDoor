module AutomaticDoor
imports
    from Sensor all,
    from Motor all
exports all
definitions
values
    OPEN_DURATION : nat = 2;
state AutomaticDoor of
    timeToClose : nat
inv mk_AutomaticDoor(ttc) == ttc <= OPEN_DURATION
init s == s = mk_AutomaticDoor(0)
end
operations
    tick : () ==> ()
    tick() ==
        (Motor`tick();
        if Sensor`detect()
            then (timeToClose := OPEN_DURATION;
            Motor`open())
        elseif Motor`isOpen()
            then if timeToClose > 0 then timeToClose := timeToClose - 1 else Motor`close())
    post 
        (Sensor`detect()
            => not Motor`isClosing() and timeToClose = OPEN_DURATION)
        and (not Sensor`detect() and Motor`isOpen()
            => timeToClose <> OPEN_DURATION);
traces
    TICK_ONLY:
        tick() *;
    TICK_SENSOR_TICK_SENSOR_TICK:
        (tick() *;
        (Sensor`setSensor(true) |
        Sensor`setSensor(false));
        tick() *;
        (Sensor`setSensor(true) |
        Sensor`setSensor(false));
        tick() *);
end AutomaticDoor