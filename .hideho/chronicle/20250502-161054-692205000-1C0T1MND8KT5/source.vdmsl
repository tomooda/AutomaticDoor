module AutomaticDoorimports    from Sensor all,    from Motor allexports alldefinitionsend AutomaticDoormodule Motorexports alldefinitionstypes    Command = <open> | <close> | <halt>;        Position = real inv p == 0.0 <= p and p <= 1.0;values    SPEED : real = 0.2;        OPEN_POSITION : Position = 1.0;        CLOSED_POSITION : Position = 0.0;state Motor of    command : Command    position : Positioninit s == s = mk_Motor(<halt>, OPEN_POSITION)endoperations    open : () ==> ()    open() == command := <open>;        close : () ==> ()    close() == command := <close>;        halt : () ==> ()    halt() == command := <halt>;        tick : () ==> ()    tick() ==        cases command:            <open> ->                (position := min(position + SPEED, OPEN_POSITION);                if postion = OPEN_POSITION then command := close),            <close> ->                (position := max(position - SPEED, CLOSED_POSITION);                if position = CLOSED_POSITION then command := <halt>),            others -> skip            end;operations    pure isOpen : () ==> bool    isOpen() == return position = OPEN_POSITION;        pure isClosed : () ==> bool    isClosed() == return position = CLOSED_POSITION;end Motormodule Sensorexports alldefinitionsstate Sensor of    sensor : boolinit s == s = mk_Sensor(false)endoperations    detect : () ==> bool    detect() == return sensor;        setSensor : bool ==> ()    setSensor(s) == sensor := s;end Sensor